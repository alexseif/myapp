security:
  enable_authenticator_manager: true
  # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
  password_hashers:
    FOS\UserBundle\Model\UserInterface: 'auto'
  # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
  providers:
    fos_userbundle:
      id: fos_user.user_provider.username
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    main:
      lazy: true
      provider: fos_userbundle
      form_login:
        login_path: fos_user_security_login
        check_path: fos_user_security_check
        enable_csrf: true
        always_use_default_target_path: true
      logout:
        path: fos_user_security_logout
        target: dashboard
      remember_me:
        secret: '%kernel.secret%'
        lifetime: 604800 # 1 week in seconds
        path: /
      # activate different ways to authenticate
      # https://symfony.com/doc/current/security.html#the-firewall

      # https://symfony.com/doc/current/security/impersonating_user.html
      # switch_user: true

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
#    - { path: ^/login$, roles: IS_AUTHENTICATED_ANONYMOUSLY }
#    - { path: ^/login_check$, roles: IS_AUTHENTICATED_ANONYMOUSLY }
#    - { path: ^/logout$, roles: IS_AUTHENTICATED_ANONYMOUSLY }
#    - { path: ^/register, roles: IS_AUTHENTICATED_ANONYMOUSLY }
#    - { path: ^/resetting, roles: IS_AUTHENTICATED_ANONYMOUSLY }
#    - { path:  ^/, roles: ROLE_ADMIN }

when@test:
  security:
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon
