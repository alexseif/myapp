<?php

namespace App\Repository;

use App\Entity\AccountTransactions;
use DateTime;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * AccountTransactionsRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AccountTransactionsRepository extends ServiceEntityRepository
{

    public const FROM = ':from';

    public const ISSUED_AT = 'at.issuedAt';

    public const ISSUED_AT_BETWEEN = self::ISSUED_AT . ' BETWEEN :from AND :to';

    public const AMOUNT_SUM = 'SUM(at.amount) as amount';

    public const ACCOUNT_PARAMETER = ':account';

    public const ACCOUNT_EQUAL = 'at.account = ' . self::ACCOUNT_PARAMETER;

    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, AccountTransactions::class);
    }

    public function issuedThisMonth()
    {
        $today = new DateTime();
        $today->setDate($today->format('Y'), $today->format('m'), 25);
        $today->setTime(00, 00, 00);

        return $this
            ->createQueryBuilder('at')
            ->select('at')
            ->where('at.issuedAt >= :today')
            ->andWhere('at.amount > 0')
            ->orderBy(self::ISSUED_AT)
            ->setParameter(':today', $today)
            ->getQuery()
            ->getResult();
    }

    public function queryAccountRange($account)
    {
        return $this
            ->createQueryBuilder('at')
            ->select('MIN(at.issuedAt) as rangeStart, MAX(at.issuedAt) as rangeEnd')
            ->where(self::ACCOUNT_EQUAL)
            ->groupBy('at.account')
            ->setParameter(self::ACCOUNT_PARAMETER, $account)
            ->getQuery()
            ->getOneOrNullResult();
    }

    public function queryAccountFromTo($account, $from, $to)
    {
        return $this
            ->createQueryBuilder('at')
            ->where(self::ACCOUNT_EQUAL)
            ->andWhere(self::ISSUED_AT_BETWEEN)
            ->orderBy(self::ISSUED_AT)
            ->setParameter(self::ACCOUNT_PARAMETER, $account)
            ->setParameter(self::FROM, $from)
            ->setParameter(':to', $to)
            ->getQuery()
            ->getResult();
    }

    public function queryAmountFromTo($account, $from, $to)
    {
        return $this
            ->createQueryBuilder('at')
            ->select(self::AMOUNT_SUM)
            ->where(self::ACCOUNT_EQUAL)
            ->andWhere(self::ISSUED_AT_BETWEEN)
            ->orderBy(self::ISSUED_AT)
            ->setParameter(self::ACCOUNT_PARAMETER, $account)
            ->setParameter(self::FROM, $from)
            ->setParameter(':to', $to)
            ->getQuery()
            ->getSingleResult();
    }

    public function queryCurrentBalanceByAccountAndRange($account, $range)
    {
        return $this
            ->createQueryBuilder('at')
            ->select(self::AMOUNT_SUM)
            ->where(self::ACCOUNT_EQUAL)
            ->andWhere(self::ISSUED_AT_BETWEEN)
            ->orderBy(self::ISSUED_AT)
            ->setParameter(self::ACCOUNT_PARAMETER, $account)
            ->setParameter(self::FROM, $range['start'])
            ->setParameter(':to', $range['end'])
            ->getQuery()
            ->getSingleResult();
    }

    public function queryCurrentBalanceByAccount($account, $to = null)
    {
        $query = $this
            ->createQueryBuilder('at')
            ->select(self::AMOUNT_SUM)
            ->where(self::ACCOUNT_EQUAL)
            ->orderBy(self::ISSUED_AT)
            ->setParameter(self::ACCOUNT_PARAMETER, $account);
        if ($to !== null) {
            $query
                ->andWhere('at.issuedAt <= :to')
                ->setParameter(':to', $to);
        }
        return $query
            ->getQuery()
            ->getSingleResult();
    }

    public function queryCurrentBalanceByAccountTo($account, $to)
    {
        return $this
            ->createQueryBuilder('at')
            ->select(self::AMOUNT_SUM)
            ->where(self::ACCOUNT_EQUAL)
            ->andWhere('at.issuedAt <= :to')
            ->orderBy(self::ISSUED_AT)
            ->setParameter(self::ACCOUNT_PARAMETER, $account)
            ->setParameter(':to', $to)
            ->getQuery()
            ->getSingleResult();
    }

    public function queryOverdueAccountTo($account, $to)
    {
        return $this
            ->createQueryBuilder('at')
            ->select(self::AMOUNT_SUM)
            ->where(self::ACCOUNT_EQUAL)
            ->andWhere('at.issuedAt <= :to')
            ->orderBy(self::ISSUED_AT)
            ->setParameter(self::ACCOUNT_PARAMETER, $account)
            ->setParameter(':to', $to)
            ->getQuery()
            ->getSingleResult();
    }

    public function queryOverdueAccount($account)
    {
        return $this
            ->createQueryBuilder('at')
            ->select(self::AMOUNT_SUM)
            ->where(self::ACCOUNT_EQUAL)
            ->orderBy(self::ISSUED_AT)
            ->setParameter(self::ACCOUNT_PARAMETER, $account)
            ->getQuery()
            ->getSingleResult();
    }

    public function queryIncome()
    {
        return $this
            ->createQueryBuilder('at')
            ->where('at.amount > 0')
            ->orderBy(self::ISSUED_AT)
            ->getQuery()
            ->getResult();
    }

    /**
     * @param DateTime $from
     * @param DateTime $to
     *
     * @return float
     */
    public function getRevenueSumByDateRange($from, $to)
    {
        $qb = $this
            ->createQueryBuilder('at')
            ->select('SUM(at.amount)')
            ->where('at.amount < 0')
            ->andWhere(self::ISSUED_AT_BETWEEN)
            ->setParameter(self::FROM, $from)
            ->setParameter(':to', $to);

        return $qb->getQuery()
            ->getSingleScalarResult();
    }

    /**
     * @return float
     */
    public function getAverage()
    {
        $qb = $this
            ->createQueryBuilder('at')
            ->select('avg(at.amount)')
            ->where('at.amount < 0');

        return $qb->getQuery()
            ->getSingleScalarResult();
    }
}
