<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * AccountTransactionsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AccountTransactionsRepository extends EntityRepository
{

  public function issuedThisMonth()
  {
    $today = new \DateTime();
    $today->setDate($today->format('Y'), $today->format('m'), $today->format('t'));
    $today->setTime(00, 00, 00);
    $today->modify("-4 days");
    return $this
            ->createQueryBuilder('at')
            ->select('at')
            ->where('at.issuedAt >= :today')
            ->andWhere('at.amount > 0')
            ->orderBy('at.issuedAt')
            ->setParameter(':today', $today)
            ->getQuery()
            ->getResult();
  }

  public function queryAccountRange($account)
  {
    return $this
            ->createQueryBuilder('at')
            ->select('MIN(at.issuedAt) as rangeStart, MAX(at.issuedAt) as rangeEnd')
            ->where('at.account = :account')
            ->groupBy('at.account')
            ->setParameter(':account', $account)
            ->getQuery()
            ->getOneOrNullResult();
  }

  public function queryAccountFromTo($account, $from, $to)
  {
    return $this
            ->createQueryBuilder('at')
            ->where('at.account = :account')
            ->andWhere('at.issuedAt BETWEEN :from AND :to')
            ->orderBy('at.issuedAt')
            ->setParameter(':account', $account)
            ->setParameter(':from', $from)
            ->setParameter(':to', $to)
            ->getQuery()
            ->getResult();
  }

  public function queryCurrentBalanceByAccountAndRange($account, $range)
  {
    return $this
            ->createQueryBuilder('at')
            ->select('SUM(at.amount) as amount')
            ->where('at.account = :account')
            ->andWhere('at.issuedAt BETWEEN :from AND :to')
            ->orderBy('at.issuedAt')
            ->setParameter(':account', $account)
            ->setParameter(':from', $range['start'])
            ->setParameter(':to', $range['end'])
            ->getQuery()
            ->getSingleResult();
  }

  public function queryCurrentBalanceByAccount($account)
  {
    return $this
            ->createQueryBuilder('at')
            ->select('SUM(at.amount) as amount')
            ->where('at.account = :account')
            ->orderBy('at.issuedAt')
            ->setParameter(':account', $account)
            ->getQuery()
            ->getSingleResult();
  }

  public function queryCurrentBalanceByAccountTo($account, $to)
  {
    return $this
            ->createQueryBuilder('at')
            ->select('SUM(at.amount) as amount')
            ->where('at.account = :account')
            ->andWhere('at.issuedAt <= :to')
            ->orderBy('at.issuedAt')
            ->setParameter(':account', $account)
            ->setParameter(':to', $to)
            ->getQuery()
            ->getSingleResult();
  }

  public function queryOverdueAccountTo($account, $to)
  {
    return $this
            ->createQueryBuilder('at')
            ->select('SUM(at.amount) as amount')
            ->where('at.account = :account')
            ->andWhere('at.issuedAt <= :to')
            ->orderBy('at.issuedAt')
            ->setParameter(':account', $account)
            ->setParameter(':to', $to)
            ->getQuery()
            ->getSingleResult();
  }

  public function queryOverdueAccount($account)
  {
    return $this
            ->createQueryBuilder('at')
            ->select('SUM(at.amount) as amount')
            ->where('at.account = :account')
            ->orderBy('at.issuedAt')
            ->setParameter(':account', $account)
            ->getQuery()
            ->getSingleResult();
  }

  public function queryIncome()
  {
    return $this
            ->createQueryBuilder('at')
            ->where('at.amount > 0')
            ->orderBy('at.issuedAt')
            ->getQuery()
            ->getResult();
  }

  /**
   * 
   * @param \DateTime $from
   * @param \DateTime $to
   * @return float
   */
  public function getRevenueSumByDateRange($from, $to)
  {
    $qb = $this
        ->createQueryBuilder('at')
        ->select('SUM(at.amount)')
        ->where('at.amount < 0')
        ->andWhere('at.issuedAt BETWEEN :from AND :to')
        ->setParameter(":from", $from)
        ->setParameter(":to", $to);

    return $qb->getQuery()
            ->getSingleScalarResult();
  }

}
