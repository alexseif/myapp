<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Accounts;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\ORM\NonUniqueResultException;
use Doctrine\ORM\NoResultException;
use Doctrine\ORM\QueryBuilder;
use Doctrine\Persistence\ManagerRegistry;

/**
 * AccountsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AccountsRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Accounts::class);
    }

    public function search($searchTerm)
    {
        return $this
            ->createQueryBuilder('a')
            ->select()
            ->where('a.name LIKE :searchTerm')
            ->setParameter(":searchTerm", '%' . $searchTerm . '%')
            ->getQuery()
            ->getResult();
    }

    public function findAllSorted()
    {
        return $this->findAllWithJoin()
            ->getQuery()
            ->getResult();
    }

    public function findAllWithJoin(): QueryBuilder
    {

        return $this
            ->createQueryBuilder('a')
            ->select('a, c')
            ->leftJoin('a.client', 'c')
            ->orderBy('c.enabled', 'DESC')
            ->addOrderBy('a.name')
            ;
    }

    /**
     *
     * @param $year
     * @param $client
     * @return array The objects.
     */
    public function findByYearAndClient($year, $client): array
    {
        $queryBuilder = $this
            ->createQueryBuilder('a')
            ->select('t, tl, a, c')
            ->leftJoin('a.taskLists', 'tl')
            ->leftJoin('a.client', 'c')
            ->leftJoin('tl.tasks', 't')
            ->where('YEAR(t.completedAt) = :year')
            ->andWhere('a.client = :client')
            ->setParameter(':year', $year)
            ->setParameter(':client', $client)
            ->groupBy('tl.account');

        return $queryBuilder
            ->getQuery()
            ->getResult();
    }

    public function getCreatedTillYear($year)
    {
        try {
            return $this
                ->createQueryBuilder('a')
                ->select('count(a.id)')
                ->where('YEAR(a.createdAt) <= :year')
                ->setParameter(":year", $year)
                ->getQuery()
                ->getSingleScalarResult();
        } catch (NoResultException | NonUniqueResultException $e) {
        }

        return null;
    }

}
