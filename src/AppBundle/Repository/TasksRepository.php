<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * TasksRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TasksRepository extends EntityRepository
{

  public function findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
  {
    if (is_null($orderBy)) {
      $orderBy = ["completed" => "ASC", "order" => "ASC"];
    }
    return parent::findBy($criteria, $orderBy, $limit, $offset);
  }

  public function findAll()
  {
    return $this->findBy(array());
  }

  public function findUnListed()
  {
    return $this->findBy(array("taskList" => null));
  }

  public function getIncomplete()
  {
    return $this
            ->createQueryBuilder('t')
            ->select('t')
            ->where('t.completed <> true')
            ->orderBy("t.urgency", "DESC")
            ->addOrderBy("t.priority", "DESC")
            ->addOrderBy("t.order", "ASC")
            ->getQuery()
            ->getResult();
  }

  public function getIncopmleteTasks()
  {
    $today = new \DateTime();
    return $this
            ->createQueryBuilder('t')
            ->select('t')
            ->where('t.completed <> true')
            ->andWhere('t.eta <= :today OR t.eta IS NULL')
            ->orderBy("t.urgency", "DESC")
            ->addOrderBy("t.priority", "DESC")
            ->addOrderBy("t.order", "ASC")
            ->setParameter(':today', $today->format('Y-m-d H:i'))
            ->getQuery()
            ->getResult();
  }

  /**
   * List of completed tasks after date
   * 
   * @param \DateTime $date
   * @return type
   */
  public function getCompletedAfter(\DateTime $date)
  {
    return $this
            ->createQueryBuilder('t')
            ->select('t, tl, a, c, r, wl')
            ->leftJoin('t.workLog', 'wl')
            ->leftJoin('t.taskList', 'tl')
            ->leftJoin('tl.account', 'a')
            ->leftJoin('a.client', 'c')
            ->leftJoin('c.rates', 'r')
            ->where('t.completedAt > :date')
            ->orderBy("t.urgency", "DESC")
            ->addOrderBy("t.priority", "DESC")
            ->addOrderBy("t.completedAt", "ASC")
            ->addOrderBy("t.order", "ASC")
            ->setParameter(':date', $date->format('Y-m-d H:i'))
            ->getQuery()
            ->getResult();
  }

  /**
   * List of completed tasks today
   * 
   * @return type
   */
  public function getCompletedToday()
  {
    $date = new \DateTime();
    $date->setTime(00, 00, 00);

    return $this->getCompletedAfter($date);
  }

  /**
   * List of completed tasks this week
   * 
   * @return type
   */
  public function getCompletedThisWeek()
  {
//    https://stackoverflow.com/a/11905818/1030170
    $day = date('w');
//    $week_start = date('Y-m-d H:i', strtotime('-' . $day . ' days'));
//    $week_end = date('Y-m-d H:i', strtotime('+' . (6 - $day) . ' days'));

    $date = new \DateTime();
    $date->sub(new \DateInterval("P" . $day . "D"));
    $date->setTime(00, 00, 00);
    return $this->getCompletedAfter($date);
  }

  /**
   * List of completed tasks this Month
   * 
   * @return type
   */
  public function getCompletedThisMonth()
  {
    $date = new \DateTime();
    $date->setDate($date->format('Y'), $date->format('m'), 1);
    $date->setTime(00, 00, 00);
    return $this->getCompletedAfter($date);
  }

  /**
   * Sums the est of completed tasks after date
   * 
   * @param type $date
   * @return type
   */
  public function sumCompletedEstAfter($date)
  {
    return $this
            ->createQueryBuilder('t')
            ->select('sum(t.est) as est')
            ->where('t.completedAt > :date')
            ->addOrderBy("t.order", "ASC")
            ->setParameter(':date', $date->format('Y-m-d H:i'))
            ->getQuery()
            ->getSingleResult();
  }

  /**
   * List of completed tasks today
   * 
   * @return type
   */
  public function sumCompletedEstToday()
  {
    $date = new \DateTime();
    $date->setTime(00, 00, 00);

    return $this->sumCompletedEstAfter($date);
  }

  /**
   * List of completed tasks this week
   * 
   * @return type
   */
  public function sumCompletedEstThisWeek()
  {
//    https://stackoverflow.com/a/11905818/1030170
    $day = date('w');
//    $week_start = date('Y-m-d H:i', strtotime('-' . $day . ' days'));
//    $week_end = date('Y-m-d H:i', strtotime('+' . (6 - $day) . ' days'));

    $date = new \DateTime();
    $date->sub(new \DateInterval("P" . $day . "D"));
    $date->setTime(00, 00, 00);
    return $this->sumCompletedEstAfter($date);
  }

  /**
   * List of completed tasks this week
   * 
   * @return type
   */
  public function sumCompletedEstThisMonth()
  {
//    https://stackoverflow.com/a/11905818/1030170
//    $day = date('d');
//    $week_start = date('Y-m-d H:i', strtotime('-' . $day . ' days'));
//    $week_end = date('Y-m-d H:i', strtotime('+' . (6 - $day) . ' days'));

    $date = new \DateTime();
    $date->setDate($date->format('Y'), $date->format('m'), 1);
    $date->setTime(00, 00, 00);
    return $this->sumCompletedEstAfter($date);
  }

  public function focusList()
  {
    $today = new \DateTime();
    return $this
            ->createQueryBuilder('t')
            ->select('t')
            ->where('t.completed <> true')
            ->andWhere('t.eta <= :today OR t.eta IS NULL')
            ->orderBy("t.urgency", "DESC")
            ->addOrderBy("t.priority", "DESC")
            ->addOrderBy("t.order", "ASC")
            ->setParameter(':today', $today->format('Y-m-d H:i'))
            ->getQuery()
            ->getResult();
  }

  public function focusLimitList()
  {
    $today = new \DateTime();
    return $this
            ->createQueryBuilder('t')
            ->select('t')
            ->where('t.completed <> true')
            ->andWhere('t.eta <= :today OR t.eta IS NULL')
            ->orderBy("t.urgency", "DESC")
            ->addOrderBy("t.priority", "DESC")
            ->addOrderBy("t.order", "ASC")
            ->setMaxResults(30)
            ->setParameter(':today', $today->format('Y-m-d H:i'))
            ->getQuery()
            ->getResult();
  }

  public function focusByTasklist($taskList)
  {
    $today = new \DateTime();
    return $this
            ->createQueryBuilder('t')
            ->select('t')
            ->where('t.completed <> true')
            ->andWhere('t.taskList = :tasklist')
            ->andWhere('t.eta <= :today OR t.eta IS NULL')
            ->orderBy("t.urgency", "DESC")
            ->addOrderBy("t.priority", "DESC")
            ->addOrderBy("t.order", "ASC")
            ->setParameter(':tasklist', $taskList)
            ->setParameter(':today', $today->format('Y-m-d H:i'))
            ->getQuery()
            ->getResult();
  }

  public function findTasksCountByDay()
  {
    return $this
            ->createQueryBuilder('t')
            ->select('COUNT(t.id) as cnt, DAYNAME(t.completedAt) as day_name')
            ->where('t.completed = 1')
            ->groupBy('day_name')
            ->orderBy('cnt', 'DESC')
            ->getQuery()
            ->getResult();
  }

  public function sumEst()
  {
    return $this
            ->createQueryBuilder('t')
            ->select('SUM(t.est) as est')
            ->where('t.completed <> true')
            ->getQuery()
            ->getSingleResult();
  }

  public function countByUrgenctAndPriority()
  {
    return $this
            ->createQueryBuilder('t')
            ->select('COUNT(t.id) as cnt, SUM(t.est) as est, t.urgency, t.priority')
            ->where('t.completed <> true')
            ->orderBy("t.urgency", "DESC")
            ->addOrderBy("t.priority", "DESC")
            ->groupBy('t.urgency')
            ->addGroupBy('t.priority')
            ->getQuery()
            ->getResult();
  }

  public function sumByUrgenctAndPriority()
  {
    return $this
            ->createQueryBuilder('t')
            ->select('SUM(t.est), t.urgency, t.priority')
            ->where('t.completed <> true')
            ->orderBy("t.urgency", "DESC")
            ->addOrderBy("t.priority", "DESC")
            ->groupBy('t.urgency')
            ->addGroupBy('t.priority')
            ->getQuery()
            ->getResult();
  }

  public function randomTasks()
  {
    $today = new \DateTime();
    return $this
            ->createQueryBuilder('t')
            ->select('t')
            ->addSelect('RAND() as HIDDEN rand')
            ->where('t.completed <> true')
            ->andWhere('t.eta <= :today OR t.eta IS NULL')
            ->addOrderBy("rand", "ASC")
            ->setMaxResults(5)
            ->setParameter(':today', $today->format('Y-m-d H:i'))
            ->getQuery()
            ->getResult();
  }

  public function singleTaskList()
  {
    $today = new \DateTime();
    return $this
            ->createQueryBuilder('t')
            ->select('t')
            ->where('t.completed <> true')
            ->andWhere('t.eta <= :today OR t.eta IS NULL')
            ->orderBy("t.urgency", "DESC")
            ->addOrderBy("t.priority", "DESC")
            ->addOrderBy("t.taskList", "DESC")
            ->setParameter(':today', $today->format('Y-m-d H:i'))
            ->getQuery()
            ->getResult();
  }

  public function weightedList()
  {
    $today = new \DateTime();
    return $this
            ->createQueryBuilder('t')
            ->select('COUNT(t.urgency) as cnt, t.urgency, t.priority, tl.id')
            ->where('t.completed <> true')
            ->andWhere('t.eta <= :today OR t.eta IS NULL')
            ->leftJoin('t.taskList', 'tl')
            ->groupBy('t.urgency, t.priority, tl.id')
            ->orderBy('t.urgency', 'DESC')
            ->addOrderBy('t.priority', 'DESC')
            ->addOrderBy('cnt', 'DESC')
            ->setParameter(':today', $today->format('Y-m-d H:i'))
            ->getQuery()
            ->getResult();
  }

  public function search($searchTerm)
  {
    return $this
            ->createQueryBuilder('t')
            ->select()
            ->where('t.task LIKE :searchTerm')
            ->setParameter(":searchTerm", '%' . $searchTerm . '%')
            ->getQuery()
            ->getResult();
  }

  public function findCompletedByClient($client)
  {
    return $this
            ->createQueryBuilder('t')
            ->select('t.est, MONTH(t.completedAt) as mnth, YEAR(t.completedAt) as yr')
            ->leftJoin('t.taskList', 'tl')
            ->leftJoin('tl.account', 'a')
            ->where('a.client = :client')
            ->andWhere('t.completedAt IS NOT NULL')
            ->setParameter(':client', $client)
            ->orderBy('t.completedAt')
            ->getQuery()
            ->getResult();
  }

  /**
   * Finds Tasks entities with joins to increase performance
   *
   * @param array      $criteria
   * @param array|null $orderBy
   *
   * @return array The objects.
   */
  public function findByWithJoins(array $criteria, array $orderBy = [])
  {
    $queryBuilder = $this
        ->createQueryBuilder('t')
        ->select('t, tl, a, c, w')
        ->leftJoin('t.taskList', 'tl')
        ->leftJoin('tl.account', 'a')
        ->leftJoin('a.client', 'c')
        ->leftJoin('t.workLog', 'w');

    $first = true;
    foreach ($criteria as $column => $value) {
      if ($first) {
        $queryBuilder->where("t.$column = :$column")
            ->setParameter(":$column", $value);
        $first = false;
      } else {
        $queryBuilder->andWhere("t.$column = :$column")
            ->setParameter(":$column", $value);
      }
    }
    $first = true;

    foreach ($orderBy as $column => $value) {
      if ($first) {
        $queryBuilder->orderBy("t.$column", $value);
        $first = false;
      } else {
        $queryBuilder->addOrderBy("t.$column", $value);
      }
    }

    return $queryBuilder
            ->getQuery()
            ->getResult();
  }

  /**
   * Finds all Tasks entities in the repository with joins to increase performance
   *
   * @return array The entities.
   */
  public function findAllWithJoins()
  {
    return $this->findByWithJoins([], ["completed" => "ASC"]);
  }

  public function findByAccountNoWorklog(\AppBundle\Entity\Accounts $account)
  {
    return $this->createQueryBuilder('t')
            ->select('t, tl, a, c, r, wl')
            ->leftJoin('t.workLog', 'wl')
            ->leftJoin('t.taskList', 'tl')
            ->leftJoin('tl.account', 'a')
            ->leftJoin('a.client', 'c')
            ->leftJoin('c.rates', 'r')
            ->where('wl.id IS NULL')
            ->andWhere('a.id = :account')
            ->setParameter(':account', $account)
            ->getQuery()
            ->getResult();
  }

}
