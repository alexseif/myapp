<?php

namespace AppBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Recurr\Recurrence;
use Recurr\Rule;
use Recurr\Transformer\ArrayTransformer;
use Recurr\Transformer\ArrayTransformerConfig;

/**
 * Recurr
 *
 * @ORM\Table(name="recurr")
 * @ORM\Entity(repositoryClass="AppBundle\Repository\RecurrRepository")
 */
class Recurr
{

  private static $frequencyList = array(0 => 'DAILY', 1 => 'WEEKLY', 2 => 'MONTHLY', 3 => 'YEARLY');
  private static $weekDays = array(0 => 'SU', 1 => 'MO', 2 => 'TU', 3 => 'WE', 4 => 'TH', 5 => 'FR', 6 => 'SA');

  /**
   * @var int
   *
   * @ORM\Column(name="id", type="integer")
   * @ORM\Id
   * @ORM\GeneratedValue(strategy="AUTO")
   */
  private $id;

  /**
   * @var string
   *
   * @ORM\Column(name="name", type="string", length=255)
   */
  private $name;

  /**
   * @var \DateTime - indicates 'first date' of recurring timeframe
   * @ORM\Column(type="date", nullable=true)
   */
  private $dateStart;

  /**
   * @var \DateTime - indicates 'until date' of rRule
   * @ORM\Column(type="date", nullable=true)
   */
  private $dateUntil;

  /**
   * @var int - indicates 'how often' rRule applies
   * @ORM\Column(type="integer", nullable=true)
   */
  private $count;

  /**
   * @var int - indicates 'how often' per frequency, ex. 1 means every month, 2 every other month
   * @ORM\Column(type="integer", nullable=true, name="freq_interval")
   */
  private $interval;

  /**
   * @var int - indicates 'frequency', uses self::$frequencyList
   * @ORM\Column(type="integer", nullable=true)
   */
  private $freq;

  /**
   * @var array - indicates 'every day', uses self::$weekDays
   * @ORM\Column(type="simple_array", nullable=true)
   */
  private $byDay;

  /**
   * @var array - integer indicates 'day of month', e.g. 1 is first day of month, -1 is last day
   * @ORM\Column(type="simple_array", nullable=true)
   */
  private $byMonthDay;

  /**
   * @var array - integer indicates 'day of year', e.g. 1 is first day of year, -1 is last day of year
   * @ORM\Column(type="simple_array", nullable=true)
   */
  private $byYearDay;

  /**
   * @var array - indicates 'every month' January is 0, December = 12
   * @ORM\Column(type="simple_array", nullable=true)
   */
  private $byMonth;

  /**
   * @return null|\DateTime[]
   */
  public function getRecurrenceCollection()
  {

    if ($this->getDateEffective() !== null) {
      return null;
    }

    if ($this->getFreq() === null) {
      return null;
    }

    $result = array();

    if ($this->getFreq() !== null) {
      $rulePart[] = 'FREQ=' . self::$frequencyList[$this->getFreq()];
    }

    if ($this->getCount() !== null) {
      $rulePart[] = 'COUNT=' . $this->getCount();
    }

    if ($this->getDateUntil() !== null) {
      $rulePart[] = 'UNTIL=' . TimeUtil::canonicalDateFormat($this->getDateUntil());
    }

    if ($this->getInterval() === null) {
      $rulePart[] = 'INTERVAL=1';
    } else {
      $rulePart[] = 'INTERVAL=' . $this->getInterval();
    }
    if (count($this->getByDay()) > 0) {
      $byWeekDayArray = array();
      foreach ($this->getByDay() as $byDay) {
        $byWeekDayArray[] = self::$weekDays[$byDay];
      }

      $rulePart[] = 'BYDAY=' . implode(',', $byWeekDayArray);
    }
    if (count($this->getByMonth()) > 0) {
      $rulePart[] = 'BYMONTH=' . implode(',', $this->getByMonth());
    }
    if (count($this->getByMonthDay()) > 0) {
      $rulePart[] = 'BYMONTHDAY=' . implode(',', $this->getByMonthDay());
    }
    if (count($this->getByYearDay()) > 0) {
      $rulePart[] = 'BYYEARDAY=' . implode(',', $this->getByYearDay());
    }

    $ruleString = implode(';', $rulePart);

    $rule = new Rule($ruleString, $this->getDateStart(), null, 'UTC');

    $transformer = new ArrayTransformer();

    // enable fix for MONTHLY
    if ($this->getFreq() === 2) {
      $transformerConfig = new ArrayTransformerConfig();
      $transformerConfig->enableLastDayOfMonthFix();
      $transformer->setConfig($transformerConfig);
    }

    $elements = $transformer->transform($rule);

    /** @var Recurrence $element */
    foreach ($elements as $element) {
      $result[] = $element->getEnd();
    }

    return $result;
  }

  /**
   * Get id.
   *
   * @return int
   */
  public function getId()
  {
    return $this->id;
  }

}
