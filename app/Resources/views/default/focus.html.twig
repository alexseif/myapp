{% extends 'base.html.twig' %}
{% block title %}Focus{% endblock %}
{% block nav %}{% endblock %}
{% block container %}
  <div class="floating-action" style="top: 25px;">
    <a href="{{ path('dashboard') }}" class="bg-embed"><span class="glyphicon glyphicon-home"></span></a>
  </div>
  <div class="floating-action" style="top: 75px;">
    <a href="{{ path('focus') }}" class="bg-embed"><span class="glyphicon glyphicon-refresh"></span></a>
  </div>
  <div class="floating-action">
    <a class="bg-primary" href="{{ path('tasks_new')}}"><span class="glyphicon glyphicon-plus"></span></a>
  </div>
  <div class="container">
    {% include 'tasks/focus-tasks.html.twig' %}
  </div>
  
{% endblock %}
{% block javascripts %}
  {{ parent() }}
  <script type="text/javascript">
    $(document).ready(function () {
      $('.task-list-name').dblclick(function () {
        $tasklist = $(this).data('tasklist');
        $('.task-list li').each(function () {
          if ($(this).children('.task-list-name').text() != $tasklist) {
            $(this).hide();
          }
        });
      });
      focusTitle();
    });
  </script>
  <script type="text/javascript">
    $(document).ready(function () {
      //Focus task list draw
      var timeLeft = 480;
      var timeNeeded = 0;
      var tasks = $('.task-list li').not('.completed');
      var completed = $('.completed');
      var container = $('.container');
      var focus = $('<ul class="list-group task-list" id="focus"></ul>');
      focus.prependTo(container);
      completed.each(function () {
        timeLeft -= $(this).data('time');
        $(this).appendTo(focus);
        $(this).children('.task').addClass('btn-primary').removeClass('btn-default');
      });
      var remainingHeight = ($(window).height() - focus.height()) / $(window).height() * 100;
      var lastLi = null;
      tasks.each(function () {
        $est = $(this).data('time');
        if ($est) {
          timeLeft -= $est;
        }
        if (timeLeft >= 0) {
          if (null == lastLi) {
            $(this).prependTo(focus);
          } else {
            $(lastLi).after(this);
          }
          lastLi = this;
          if ($est) {
            timeNeeded += $est;
          }
        }
      });
      focus.children('li').not('.completed').each(function () {
        $est = $(this).data('time');
        if ($est) {
          $(this).animate({height: ($est / timeNeeded) * remainingHeight + 'vh'});
        }
        $(this).children('.task').addClass('btn-primary').removeClass('btn-default');
      });
      focus.sortable({
        connectWith: ".task-list",
        placeholder: "ui-state-highlight",
        items: "li:not(.completed)",
        update: function (event, ui) {
          var data = $(this).sortable("serialize", {"key": "tasks[][id]", attribute: "data-order"});
          $.ajax({
            data: data,
            dataType: "json",
            type: 'POST',
            url: tasks_order
          }).done(focusTitle());
        }
      });
    });
  </script>
{% endblock %}
